name: Release
on:
  push:
    branches:
      - master

# Workflow's jobs
jobs:
  release:
    name: build and release electron app
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      # step1: check out repository
      - uses: actions/checkout@v2

      # step2: install node
      - uses: actions/setup-node@v2
        with:
          node-version: "14.16.0"
      - run: npm install -g yarn@1.22.10

      # step2: cache node_modules
      - name: Cache Desktop node_modules
        id: cache-desktop-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock', 'patches/**') }}

      # step3: install node_modules
      - name: Install node_modules
        if: steps.cache-desktop-modules.outputs.cache-hit != 'true'
        run: yarn install

      # step4: cleanup artifacts in dist_electron
      - name: build artifacts for windows
        run: yarn build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # step5: clea nartifacts
      - name: cleanup artifacts for windows
        if: matrix.os == 'windows-latest'
        run: |
          npx rimraf "release/!(*.exe)"

      # step6: upload artifacts
      - name: Release windows package
        if: matrix.os == 'windows-latest'
        run: yarn publish:win:setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release mac package
        if: matrix.os == 'macos-latest'
        run: yarn publish:mac:dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release linux package
        if: matrix.os == 'ubuntu-latest'
        run: yarn publish:linux:deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
