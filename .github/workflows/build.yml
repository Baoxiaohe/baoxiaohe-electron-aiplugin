# Workflow's name
name: Build Electron App For Win/Mac

# Workflow's trigger
on:
  push:
    branches:
          - master

# Workflow's jobs
jobs:
  # job's id
  release:
    # job's name
    name: build and release electron app

    # the type of machine to run the job on
    runs-on: ${{ matrix.os }}

    # create a build matrix for jobs
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    # create steps
    steps:
      # step1: check out repository
      - name: Check out git repository
        uses: actions/checkout@v3.0.0

      # step2: install node env
      - name: Install Node.js
        uses: actions/setup-node@v3.0.0

      # step3: npm install
      - name: npm install
        run: |
          npm install

      # step4: build app for mac/win
      - name: build windows app
        if: matrix.os == 'windows-latest'
        run: |
          npm run electron:build-win
        env:
          GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: build mac app
        if: matrix.os == 'macos-latest'
        run: |
          npm run electron:build
        env:
          GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # step5: cleanup artifacts in dist
      - name: Cleanup Artifacts for Windows
        if: matrix.os == 'windows-latest'
        run: |
          npx rimraf "dist/!(*.exe)"

      - name: Cleanup Artifacts for MacOS
        if: matrix.os == 'macos-latest'
        run: |
          npx rimraf "dist/!(*.dmg)"

      # step6: upload artifacts
      - name: upload artifacts
        uses: actions/upload-artifact@v3.0.0
        with:
          name: ${{ matrix.os }}
          path: dist

      # step7: create release
      - name: release
        uses: softprops/action-gh-release@v0.1.14
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "dist/**"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        env:
          API_KEY_ID: ${{ secrets.MACOS_API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ secrets.MACOS_API_KEY_ISSUER_ID }}
        with:
          mac_certs: ${{ secrets.MACOS_CERTIFICATE_APPLICATION}}
          mac_certs_password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD}}
          windows_certs: ${{ secrets.WINDOWS_CERTIFICATE_APPLICATION}}
          windows_certs_password: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD}}
          github_token: ${{ secrets.github_token }}

          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          max_attempts: 5